"""
‰øÆÂæ©ÁâàË¢´ÂãïÊäÄËÉΩÁÆ°ÁêÜÂô® - Â¢ûÂä†Ë©≥Á¥∞Ë™øË©¶‰ø°ÊÅØÂíåÂïèÈ°åË®∫Êñ∑
"""
import time
import random
import pyautogui


class PassiveSkillsManager:
    def __init__(self):
        # ÊäÄËÉΩÂÜ∑ÂçªËøΩË∏™
        self.last_used_time = {
            'skill_1': 0,
            'skill_2': 0,
            'skill_3': 0,
            'skill_4': 0
        }
        
        # ‰ΩøÁî®Ë®àÊï∏
        self.usage_count = {
            'skill_1': 0,
            'skill_2': 0,
            'skill_3': 0,
            'skill_4': 0
        }
        
        # ÂàùÂßãÂåñÊôÇÈñì
        self.start_time = time.time()
        
        # ‚òÖ‚òÖ‚òÖ Êñ∞Â¢ûÔºöË™øË©¶Ê®ôË™å ‚òÖ‚òÖ‚òÖ
        self.debug_mode = True
        self.last_debug_time = 0
        self.debug_interval = 10.0  # ÊØè10ÁßíËº∏Âá∫‰∏ÄÊ¨°Ë™øË©¶‰ø°ÊÅØ
        
        # ‚òÖ‚òÖ‚òÖ Êñ∞Â¢ûÔºöÊ™¢Êü•Ë®àÊï∏Âô® ‚òÖ‚òÖ‚òÖ
        self.check_count = 0
        self.successful_use_count = 0
        
        print("üéØ Ë¢´ÂãïÊäÄËÉΩÁÆ°ÁêÜÂô®Â∑≤ÂàùÂßãÂåñ")
        self._print_config()
        self._validate_pyautogui()
    
    def _validate_pyautogui(self):
        """È©óË≠â pyautogui ÊòØÂê¶Ê≠£Â∏∏Â∑•‰Ωú"""
        try:
            # Ê∏¨Ë©¶ pyautogui ÂäüËÉΩ
            current_pos = pyautogui.position()
            print(f"‚úÖ pyautogui Ê≠£Â∏∏ÈÅã‰ΩúÔºåÁï∂ÂâçÊªëÈº†‰ΩçÁΩÆ: {current_pos}")
            
            # Ê™¢Êü• failsafe Ë®≠ÁΩÆ
            if pyautogui.FAILSAFE:
                print("‚ö†Ô∏è pyautogui.FAILSAFE Â∑≤ÂïüÁî®ÔºåÂèØËÉΩÊúÉÈòªÊ≠¢ÊåâÈçµÊìç‰Ωú")
            
            return True
        except Exception as e:
            print(f"‚ùå pyautogui È©óË≠âÂ§±Êïó: {e}")
            return False
    
    def _print_config(self):
        """È°ØÁ§∫ÈÖçÁΩÆÊëòË¶Å"""
        try:
            from config import (
                ENABLE_PASSIVE_SKILLS,
                PASSIVE_SKILL_1_KEY, PASSIVE_SKILL_2_KEY, PASSIVE_SKILL_3_KEY, PASSIVE_SKILL_4_KEY,
                PASSIVE_SKILL_1_COOLDOWN, PASSIVE_SKILL_2_COOLDOWN, PASSIVE_SKILL_3_COOLDOWN, PASSIVE_SKILL_4_COOLDOWN,
                ENABLE_PASSIVE_SKILL_1, ENABLE_PASSIVE_SKILL_2, ENABLE_PASSIVE_SKILL_3, ENABLE_PASSIVE_SKILL_4,
                PASSIVE_SKILL_RANDOM_DELAY_MIN, PASSIVE_SKILL_RANDOM_DELAY_MAX
            )
            
            if not ENABLE_PASSIVE_SKILLS:
                print("‚ùå Ë¢´ÂãïÊäÄËÉΩÂ∑≤Á¶ÅÁî®")
                return
            
            skills = [
                (1, ENABLE_PASSIVE_SKILL_1, PASSIVE_SKILL_1_KEY, PASSIVE_SKILL_1_COOLDOWN),
                (2, ENABLE_PASSIVE_SKILL_2, PASSIVE_SKILL_2_KEY, PASSIVE_SKILL_2_COOLDOWN),
                (3, ENABLE_PASSIVE_SKILL_3, PASSIVE_SKILL_3_KEY, PASSIVE_SKILL_3_COOLDOWN),
                (4, ENABLE_PASSIVE_SKILL_4, PASSIVE_SKILL_4_KEY, PASSIVE_SKILL_4_COOLDOWN)
            ]
            
            enabled_skills = []
            for num, enabled, key, cooldown in skills:
                if enabled:
                    enabled_skills.append(f"ÊäÄËÉΩ{num}({key}): {cooldown}Áßí")
            
            if enabled_skills:
                print("‚úÖ ÂïüÁî®ÁöÑË¢´ÂãïÊäÄËÉΩ:")
                for skill in enabled_skills:
                    print(f"   {skill}")
                print(f"   Èö®Ê©üÂª∂ÈÅ≤: {PASSIVE_SKILL_RANDOM_DELAY_MIN}-{PASSIVE_SKILL_RANDOM_DELAY_MAX}Áßí")
            else:
                print("‚ö†Ô∏è ÁÑ°ÂïüÁî®ÁöÑË¢´ÂãïÊäÄËÉΩ")
                
        except ImportError as e:
            print(f"‚ùå ÈÖçÁΩÆËºâÂÖ•Â§±Êïó: {e}")
    
    def check_and_use_skills(self):
        """Ê™¢Êü•‰∏¶‰ΩøÁî®ÂèØÁî®ÁöÑË¢´ÂãïÊäÄËÉΩ - Â¢ûÂº∑Áâà"""
        try:
            from config import ENABLE_PASSIVE_SKILLS
            if not ENABLE_PASSIVE_SKILLS:
                if self.debug_mode and self.check_count % 50 == 0:  # ÊØè50Ê¨°Ê™¢Êü•ÊèêÈÜí‰∏ÄÊ¨°
                    print("‚ùå Ë¢´ÂãïÊäÄËÉΩÂäüËÉΩÂ∑≤Á¶ÅÁî®")
                return
        except ImportError:
            if self.debug_mode and self.check_count % 50 == 0:
                print("‚ùå ÁÑ°Ê≥ïËºâÂÖ•Ë¢´ÂãïÊäÄËÉΩÈÖçÁΩÆ")
            return
        
        current_time = time.time()
        self.check_count += 1
        
        # ‚òÖ‚òÖ‚òÖ Ë™øË©¶‰ø°ÊÅØÔºöÂÆöÊúüËº∏Âá∫ÁãÄÊÖã ‚òÖ‚òÖ‚òÖ
        if self.debug_mode and current_time - self.last_debug_time >= self.debug_interval:
            self._print_debug_status(current_time)
            self.last_debug_time = current_time
        
        # Ê™¢Êü•ÂõõÂÄãÊäÄËÉΩ
        skills_checked = 0
        skills_used = 0
        
        for skill_num in ['1', '2', '3', '4']:
            skill_id = f'skill_{skill_num}'
            was_used = self._check_skill(skill_id, current_time)
            skills_checked += 1
            if was_used:
                skills_used += 1
                self.successful_use_count += 1
        
        # ‚òÖ‚òÖ‚òÖ Ë©≥Á¥∞Ë™øË©¶ÔºöÊØèÊ¨°Ê™¢Êü•ÁöÑÁµêÊûú ‚òÖ‚òÖ‚òÖ
        if self.debug_mode and (skills_used > 0 or self.check_count % 100 == 0):
            print(f"üîç [Ë™øË©¶] Á¨¨{self.check_count}Ê¨°Ê™¢Êü•: {skills_checked}ÂÄãÊäÄËÉΩÊ™¢Êü•, {skills_used}ÂÄãÊäÄËÉΩ‰ΩøÁî®")
    
    def _print_debug_status(self, current_time):
        """Ëº∏Âá∫Ë©≥Á¥∞ÁöÑË™øË©¶ÁãÄÊÖã"""
        uptime = current_time - self.start_time
        print(f"\n{'='*60}")
        print(f"üîß Ë¢´ÂãïÊäÄËÉΩË™øË©¶Â†±Âëä (ÈÅãË°åÊôÇÈñì: {uptime:.1f}Áßí)")
        print(f"   Ê™¢Êü•Ê¨°Êï∏: {self.check_count}")
        print(f"   ÊàêÂäü‰ΩøÁî®: {self.successful_use_count}")
        
        # È°ØÁ§∫ÊØèÂÄãÊäÄËÉΩÁöÑÂÜ∑ÂçªÁãÄÊÖã
        for i in range(1, 5):
            skill_id = f'skill_{i}'
            try:
                enabled, key, cooldown = self._get_skill_config(str(i))
                if enabled:
                    last_used = self.last_used_time[skill_id]
                    if last_used == 0:
                        status = "ÂæûÊú™‰ΩøÁî®ÔºåÂèØÁ´ãÂç≥‰ΩøÁî®"
                    else:
                        time_since_use = current_time - last_used
                        if time_since_use >= cooldown:
                            status = f"ÂÜ∑ÂçªÂÆåÊàêÔºåÂèØ‰ΩøÁî® (‰∏äÊ¨°‰ΩøÁî®: {time_since_use:.1f}ÁßíÂâç)"
                        else:
                            remaining = cooldown - time_since_use
                            status = f"ÂÜ∑Âçª‰∏≠ÔºåÂâ©È§ò {remaining:.1f}Áßí"
                    
                    count = self.usage_count[skill_id]
                    print(f"   ÊäÄËÉΩ{i}({key}): {status} [‰ΩøÁî®Ê¨°Êï∏: {count}]")
            except:
                print(f"   ÊäÄËÉΩ{i}: ÈÖçÁΩÆÈåØË™§")
        
        print(f"{'='*60}\n")
    
    def _get_skill_config(self, skill_num):
        """Áç≤ÂèñÊäÄËÉΩÈÖçÁΩÆ"""
        config_map = {
            '1': ('ENABLE_PASSIVE_SKILL_1', 'PASSIVE_SKILL_1_KEY', 'PASSIVE_SKILL_1_COOLDOWN'),
            '2': ('ENABLE_PASSIVE_SKILL_2', 'PASSIVE_SKILL_2_KEY', 'PASSIVE_SKILL_2_COOLDOWN'),
            '3': ('ENABLE_PASSIVE_SKILL_3', 'PASSIVE_SKILL_3_KEY', 'PASSIVE_SKILL_3_COOLDOWN'),
            '4': ('ENABLE_PASSIVE_SKILL_4', 'PASSIVE_SKILL_4_KEY', 'PASSIVE_SKILL_4_COOLDOWN')
        }
        
        enable_attr, key_attr, cooldown_attr = config_map[skill_num]
        
        import config
        enabled = getattr(config, enable_attr)
        key = getattr(config, key_attr)
        cooldown = getattr(config, cooldown_attr)
        
        return enabled, key, cooldown
    
    def _check_skill(self, skill_id, current_time):
        """Ê™¢Êü•ÂñÆÂÄãÊäÄËÉΩÊòØÂê¶ÂèØÁî®‰∏¶‰ΩøÁî® - Â¢ûÂº∑Áâà"""
        skill_num = skill_id.split('_')[1]
        
        try:
            enabled, key, cooldown = self._get_skill_config(skill_num)
            
            # Â¶ÇÊûúÊäÄËÉΩÊú™ÂïüÁî®ÔºåË∑≥ÈÅé
            if not enabled:
                return False
            
            # Ê™¢Êü•ÂÜ∑ÂçªÊôÇÈñì 
            last_used = self.last_used_time[skill_id]
            time_since_use = current_time - last_used

            # ‚òÖ‚òÖ‚òÖ ‰øÆÂæ©ÔºöÂàùÂßãÂÄºÁÇ∫0ÊôÇÊáâË©≤ÂèØ‰ª•Á´ãÂç≥‰ΩøÁî® ‚òÖ‚òÖ‚òÖ
            if last_used > 0 and time_since_use < cooldown:
                # ÈÇÑÂú®ÂÜ∑Âçª‰∏≠
                if self.debug_mode and self.check_count % 200 == int(skill_num):
                    remaining = cooldown - time_since_use
                    print(f"üïí [Ë™øË©¶] ÊäÄËÉΩ{skill_num}({key}) ÂÜ∑Âçª‰∏≠ÔºåÂâ©È§ò {remaining:.1f}Áßí")
                return False

            # ‚òÖ‚òÖ‚òÖ Êñ∞Â¢ûÔºöÁ¢∫‰øùÂàùÂßãÁãÄÊÖãÂèØ‰ª•‰ΩøÁî® ‚òÖ‚òÖ‚òÖ
            if last_used == 0:
                print(f"üéØ [Ë™øË©¶] ÊäÄËÉΩ{skill_num}({key}) ÂàùÊ¨°ÂèØÁî®ÔºåÊ∫ñÂÇô‰ΩøÁî®")
            
            # ‚òÖ‚òÖ‚òÖ Ë©≥Á¥∞Ë™øË©¶ÔºöÊ∫ñÂÇô‰ΩøÁî®ÊäÄËÉΩ ‚òÖ‚òÖ‚òÖ
            if self.debug_mode:
                if last_used == 0:
                    print(f"üéØ [Ë™øË©¶] ÊäÄËÉΩ{skill_num}({key}) È¶ñÊ¨°‰ΩøÁî®Ê∫ñÂÇô‰∏≠...")
                else:
                    print(f"üéØ [Ë™øË©¶] ÊäÄËÉΩ{skill_num}({key}) ÂÜ∑ÂçªÂÆåÊàêÔºåÊ∫ñÂÇô‰ΩøÁî® (‰∏äÊ¨°: {time_since_use:.1f}ÁßíÂâç)")
            
            # ‰ΩøÁî®ÊäÄËÉΩ
            success = self._use_skill_with_debug(skill_id, key, skill_num, current_time)
            return success
                          
        except (ImportError, AttributeError) as e:
            if self.debug_mode:
                print(f"‚ö†Ô∏è [Ë™øË©¶] ÊäÄËÉΩ{skill_num}ÈÖçÁΩÆÈåØË™§: {e}")
            return False
    
    def _use_skill_with_debug(self, skill_id, key, skill_num, current_time):
        """‰ΩøÁî®ÊäÄËÉΩ - Â¢ûÂº∑ÁâàÔºåÂåÖÂê´Ë©≥Á¥∞Ë™øË©¶"""
        try:
            from config import PASSIVE_SKILL_RANDOM_DELAY_MIN, PASSIVE_SKILL_RANDOM_DELAY_MAX
            
            # ‚òÖ‚òÖ‚òÖ Ë™øË©¶ÔºöÊäÄËÉΩ‰ΩøÁî®ÂâçÁãÄÊÖã ‚òÖ‚òÖ‚òÖ
            print(f"üöÄ [Ë™øË©¶] ÈñãÂßã‰ΩøÁî®ÊäÄËÉΩ{skill_num}({key})")
            
            # Èö®Ê©üÂª∂ÈÅ≤
            if PASSIVE_SKILL_RANDOM_DELAY_MAX > PASSIVE_SKILL_RANDOM_DELAY_MIN:
                delay = random.uniform(PASSIVE_SKILL_RANDOM_DELAY_MIN, PASSIVE_SKILL_RANDOM_DELAY_MAX)
                print(f"‚è≥ [Ë™øË©¶] Èö®Ê©üÂª∂ÈÅ≤ {delay:.2f}Áßí")
                time.sleep(delay)
            
            # ‚òÖ‚òÖ‚òÖ Ë©≥Á¥∞Ë™øË©¶ÔºöÊåâÈçµÊìç‰Ωú ‚òÖ‚òÖ‚òÖ
            print(f"‚å®Ô∏è [Ë™øË©¶] Ê∫ñÂÇôÊåâ‰∏ãÊåâÈçµ: {key}")
            
            # Ê™¢Êü•ÊåâÈçµÊòØÂê¶ÊúâÊïà
            if not key or len(key.strip()) == 0:
                print(f"‚ùå [Ë™øË©¶] ÁÑ°ÊïàÁöÑÊåâÈçµ: '{key}'")
                return False
            
            # ÂòóË©¶ÊåâÈçµÊìç‰Ωú
            try:
                print(f"‚å®Ô∏è [Ë™øË©¶] Âü∑Ë°å pyautogui.keyDown('{key}')")
                pyautogui.keyDown(key)
                
                print(f"‚å®Ô∏è [Ë™øË©¶] Âü∑Ë°å pyautogui.keyUp('{key}')")
                pyautogui.keyUp(key)
                
                print(f"‚úÖ [Ë™øË©¶] ÊåâÈçµÊìç‰ΩúÂÆåÊàê: {key}")
                
            except Exception as key_error:
                print(f"‚ùå [Ë™øË©¶] ÊåâÈçµÊìç‰ΩúÂ§±Êïó: {key_error}")
                return False
            
            # Êõ¥Êñ∞Ë®òÈåÑ
            self.last_used_time[skill_id] = current_time
            self.usage_count[skill_id] += 1
            
            print(f"üéØ ‰ΩøÁî®ÊäÄËÉΩ{skill_num}({key}) - Á∏ΩË®à: {self.usage_count[skill_id]}Ê¨°")
            print(f"‚úÖ [Ë™øË©¶] ÊäÄËÉΩ{skill_num}‰ΩøÁî®ÊàêÂäüÔºå‰∏ãÊ¨°ÂèØÁî®ÊôÇÈñì: {current_time + self._get_skill_config(skill_num)[2]:.1f}")
            
            return True
            
        except Exception as e:
            print(f"‚ùå [Ë™øË©¶] ÊäÄËÉΩ{skill_num}({key})‰ΩøÁî®ÈÅéÁ®ãÂ§±Êïó: {e}")
            import traceback
            print(f"Ë©≥Á¥∞ÈåØË™§: {traceback.format_exc()}")
            return False
    
    def force_use_skill(self, skill_num):
        """Âº∑Âà∂‰ΩøÁî®ÊäÄËÉΩÔºàË™øË©¶Áî®Ôºâ"""
        skill_id = f'skill_{skill_num}'
        try:
            enabled, key, cooldown = self._get_skill_config(str(skill_num))
            if enabled:
                print(f"üö® [Âº∑Âà∂] Âº∑Âà∂‰ΩøÁî®ÊäÄËÉΩ{skill_num}({key})")
                success = self._use_skill_with_debug(skill_id, key, str(skill_num), time.time())
                return success
            else:
                print(f"‚ùå [Âº∑Âà∂] ÊäÄËÉΩ{skill_num}Êú™ÂïüÁî®")
                return False
        except Exception as e:
            print(f"‚ùå [Âº∑Âà∂] Âº∑Âà∂‰ΩøÁî®ÊäÄËÉΩ{skill_num}Â§±Êïó: {e}")
            return False
    
    def test_all_keys(self):
        """Ê∏¨Ë©¶ÊâÄÊúâÂïüÁî®ÁöÑÊäÄËÉΩÊåâÈçµÔºàË™øË©¶Áî®Ôºâ"""
        print("üß™ Ê∏¨Ë©¶ÊâÄÊúâË¢´ÂãïÊäÄËÉΩÊåâÈçµ...")
        
        for i in range(1, 5):
            try:
                enabled, key, cooldown = self._get_skill_config(str(i))
                if enabled:
                    print(f"üß™ Ê∏¨Ë©¶ÊäÄËÉΩ{i}ÊåâÈçµ: {key}")
                    try:
                        pyautogui.keyDown(key)
                        time.sleep(0.1)
                        pyautogui.keyUp(key)
                        print(f"‚úÖ ÊäÄËÉΩ{i}({key}) ÊåâÈçµÊ∏¨Ë©¶ÊàêÂäü")
                    except Exception as e:
                        print(f"‚ùå ÊäÄËÉΩ{i}({key}) ÊåâÈçµÊ∏¨Ë©¶Â§±Êïó: {e}")
                    
                    time.sleep(0.5)  # Ê∏¨Ë©¶ÈñìÈöî
            except Exception as e:
                print(f"‚ùå ÊäÄËÉΩ{i}ÈÖçÁΩÆÈåØË™§: {e}")
    
    def reset_all_cooldowns(self):
        """ÈáçÁΩÆÊâÄÊúâÊäÄËÉΩÂÜ∑ÂçªÔºàË™øË©¶Áî®Ôºâ"""
        print("üîÑ ÈáçÁΩÆÊâÄÊúâÊäÄËÉΩÂÜ∑ÂçªÊôÇÈñì")
        for skill_id in self.last_used_time:
            self.last_used_time[skill_id] = 0
        print("‚úÖ ÊâÄÊúâÊäÄËÉΩÂÜ∑ÂçªÂ∑≤ÈáçÁΩÆ")
    
    def toggle_debug(self):
        """ÂàáÊèõË™øË©¶Ê®°Âºè"""
        self.debug_mode = not self.debug_mode
        print(f"üîß Ë¢´ÂãïÊäÄËÉΩË™øË©¶Ê®°Âºè: {'ÈñãÂïü' if self.debug_mode else 'ÈóúÈñâ'}")
    
    def get_statistics(self):
        """Áç≤ÂèñÁµ±Ë®à‰ø°ÊÅØ"""
        try:
            from config import ENABLE_PASSIVE_SKILLS
            if not ENABLE_PASSIVE_SKILLS:
                return "Ë¢´ÂãïÊäÄËÉΩÁµ±Ë®à: ÂäüËÉΩÂ∑≤Á¶ÅÁî®"
        except ImportError:
            return "Ë¢´ÂãïÊäÄËÉΩÁµ±Ë®à: ÈÖçÁΩÆËºâÂÖ•Â§±Êïó"
        
        uptime = time.time() - self.start_time
        uptime_minutes = uptime / 60
        
        total_used = sum(self.usage_count.values())
        
        stats = [
            f"Ë¢´ÂãïÊäÄËÉΩÁµ±Ë®à:",
            f"  ÈÅãË°åÊôÇÈñì: {uptime_minutes:.1f} ÂàÜÈêò",
            f"  Ê™¢Êü•Ê¨°Êï∏: {self.check_count}",
            f"  Á∏ΩË®à‰ΩøÁî®: {total_used} Ê¨°",
            f"  ÊàêÂäüÁéá: {self.successful_use_count}/{self.check_count} ({self.successful_use_count/max(1,self.check_count)*100:.1f}%)"
        ]
        
        # È°ØÁ§∫ÂÄãÂà•ÊäÄËÉΩ‰ΩøÁî®Ê¨°Êï∏
        for i in range(1, 5):
            skill_id = f'skill_{i}'
            count = self.usage_count[skill_id]
            if count > 0:
                avg_per_minute = count / uptime_minutes if uptime_minutes > 0 else 0
                stats.append(f"  ÊäÄËÉΩ{i}: {count}Ê¨° ({avg_per_minute:.1f}/ÂàÜÈêò)")
        
        return "\n".join(stats)
    
    def get_enabled_skills_count(self):
        """Áç≤ÂèñÂïüÁî®ÁöÑÊäÄËÉΩÊï∏Èáè"""
        try:
            from config import (
                ENABLE_PASSIVE_SKILLS,
                ENABLE_PASSIVE_SKILL_1, ENABLE_PASSIVE_SKILL_2, 
                ENABLE_PASSIVE_SKILL_3, ENABLE_PASSIVE_SKILL_4
            )
            
            if not ENABLE_PASSIVE_SKILLS:
                return 0
            
            return sum([
                ENABLE_PASSIVE_SKILL_1,
                ENABLE_PASSIVE_SKILL_2,
                ENABLE_PASSIVE_SKILL_3,
                ENABLE_PASSIVE_SKILL_4
            ])
            
        except ImportError:
            return 0
    
    def validate_configuration(self):
        """È©óË≠âÈÖçÁΩÆ"""
        try:
            from config import ENABLE_PASSIVE_SKILLS
            if not ENABLE_PASSIVE_SKILLS:
                return ["Ë¢´ÂãïÊäÄËÉΩÂ∑≤Á¶ÅÁî®"]
        except ImportError:
            return ["ÈÖçÁΩÆËºâÂÖ•Â§±Êïó"]
        
        warnings = []
        enabled_count = self.get_enabled_skills_count()
        
        if enabled_count == 0:
            warnings.append("Ë≠¶Âëä: Ê≤íÊúâÂïüÁî®‰ªª‰ΩïË¢´ÂãïÊäÄËÉΩ")
        
        try:
            from config import PASSIVE_SKILL_RANDOM_DELAY_MIN, PASSIVE_SKILL_RANDOM_DELAY_MAX
            
            if PASSIVE_SKILL_RANDOM_DELAY_MIN < 0:
                warnings.append("Ë≠¶Âëä: ÊúÄÂ∞èÂª∂ÈÅ≤ÊôÇÈñì‰∏çËÉΩÁÇ∫Ë≤†Êï∏")
            if PASSIVE_SKILL_RANDOM_DELAY_MAX < PASSIVE_SKILL_RANDOM_DELAY_MIN:
                warnings.append("Ë≠¶Âëä: ÊúÄÂ§ßÂª∂ÈÅ≤ÊôÇÈñìÊáâÂ§ßÊñºÁ≠âÊñºÊúÄÂ∞èÂª∂ÈÅ≤ÊôÇÈñì")
                
        except ImportError:
            warnings.append("Ë≠¶Âëä: Âª∂ÈÅ≤ÈÖçÁΩÆËºâÂÖ•Â§±Êïó")
        
        # È©óË≠âÊåâÈçµÈÖçÁΩÆ
        for i in range(1, 5):
            try:
                enabled, key, cooldown = self._get_skill_config(str(i))
                if enabled:
                    if not key or len(key.strip()) == 0:
                        warnings.append(f"Ë≠¶Âëä: ÊäÄËÉΩ{i}ÊåâÈçµÁÇ∫Á©∫")
                    if cooldown < 0:
                        warnings.append(f"Ë≠¶Âëä: ÊäÄËÉΩ{i}ÂÜ∑ÂçªÊôÇÈñì‰∏çËÉΩÁÇ∫Ë≤†Êï∏")
            except Exception as e:
                warnings.append(f"Ë≠¶Âëä: ÊäÄËÉΩ{i}ÈÖçÁΩÆÈåØË™§: {e}")
        
        return warnings if warnings else ["ÈÖçÁΩÆÈ©óË≠âÈÄöÈÅé"]